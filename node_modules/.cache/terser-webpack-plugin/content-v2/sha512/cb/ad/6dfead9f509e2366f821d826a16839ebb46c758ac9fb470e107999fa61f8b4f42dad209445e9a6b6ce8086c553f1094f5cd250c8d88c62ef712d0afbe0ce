{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{186:function(t,a,e){\"use strict\";e.r(a);var s=e(0),r=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"git\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Git\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"Ben 喜欢用的分布式版本控制系统。\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"git-分支命名规范\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-分支命名规范\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Git 分支命名规范\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"其实不管在什么项目开发的时候（当然不仅仅是用于项目代码，也可以管理.psd、游戏存档...等），都应该使用版本控制，不仅能减少许多不必要的麻烦（例如与另一个小伙伴），还能让你在进行某一项开发的时候临时接到一个新需求而不会感到手忙脚乱。其实在开始使用 Git 分支管理的时候，我在思考怎么命名分支才能够清楚每个分支的作用。上网找了许多资料，目前一下的分支命名规范是我觉得比较适合大多数项目开发模式的。\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[t._v(\"分支:\\t\\t   命名:\\t\\t  说明:\\n\\n主分支\\t\\t   master\\t\\t  主要用来发布正式版本，就是提供给用户使用的版本\\n开发分支\\t\\t   dev \\t\\t      永远是功能最全的分支\\n功能分支\\t\\t   feature-*\\t  新功能分支，某个功能点正在开发阶段\\n发布版本\\t\\t   release-*\\t  发布定期要上线的功能\\n修复分支\\t\\t   bug-*\\t\\t  修复线上代码的 bug\\n\\n\")])])])])},[],!1,null,null,null);a.default=r.exports}}]);","extractedComments":[]}