{"remainingRequest":"/Users/apple/Documents/notes/benNotes/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/apple/Documents/notes/benNotes/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/apple/Documents/notes/benNotes/docs/react/react-knowledge.md?vue&type=template&id=64bab1f8&","dependencies":[{"path":"/Users/apple/Documents/notes/benNotes/docs/react/react-knowledge.md","mtime":1566836036047},{"path":"/Users/apple/Documents/notes/benNotes/node_modules/cache-loader/dist/cjs.js","mtime":1566836214203},{"path":"/Users/apple/Documents/notes/benNotes/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1566836223415},{"path":"/Users/apple/Documents/notes/benNotes/node_modules/cache-loader/dist/cjs.js","mtime":1566836214203},{"path":"/Users/apple/Documents/notes/benNotes/node_modules/vue-loader/lib/index.js","mtime":1566836223415},{"path":"/Users/apple/Documents/notes/benNotes/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1566836214188}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"react\"><a class=\"header-anchor\" href=\"#react\" aria-hidden=\"true\">#</a> React</h1>\n<blockquote>\n<p>Ben 第一次接触的前端框架。</p>\n</blockquote>\n<h2 id=\"hooks\"><a class=\"header-anchor\" href=\"#hooks\" aria-hidden=\"true\">#</a> Hooks</h2>\n<ul>\n<li>使用 Hooks 原因：Hooks 是 react 16.8 引入的特性，他允许你在不写 class 的情况下操作 state 和 react 的其他特性。hooks 只是多了一种写组件的方法，使编写一个组件更简单更方便，同时可以自定义 hook 把公共的逻辑提取出来，让逻辑在多个组件之间共享。</li>\n</ul>\n<p>基本用法：</p>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        +\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        -\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"state-hook\"><a class=\"header-anchor\" href=\"#state-hook\" aria-hidden=\"true\">#</a> State hook</h3>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>state hook 的主要作用就是获取需要的 state 和 更新 state 的方法</p>\n</div>\n<p>使用方法：</p>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>参数： initialState 可以直接是当前 state 的初始值，也可以是一个函数，函数的返回值将作为 state 的值，参数只会在组件的初始渲染中起作用</p>\n<p>返回值：返回的是一个数组，一个是当前 state 的值，另一个是更新 state 的方法，这里面 setState 方法与 class 中的 setState 不同在于，此 setState 不会合并 state 中的值</p>\n<p>如果需要定义多个 state 只需要多次调用 useState 方法就行。</p>\n</div>\n",null]}