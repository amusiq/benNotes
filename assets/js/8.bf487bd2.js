(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{193:function(e,t,r){"use strict";r.r(t);var n=r(0),o=Object(n.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git","aria-hidden":"true"}},[e._v("#")]),e._v(" Git")]),e._v(" "),r("blockquote",[r("p",[e._v("Ben 喜欢用的分布式版本控制系统。")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://developpaper.com/introduction-to-git-use/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Introduction to Git Use"),r("OutboundLink")],1),r("br"),e._v(" "),r("a",{attrs:{href:"https://www.youtube.com/playlist?list=PLRqwX-V7Uu6ZF9C0YMKuns9sLDzK6zoiV",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git and GitHub for Poets - Daniel Shiffman"),r("OutboundLink")],1),r("br"),e._v(" "),r("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git 教程 - 廖雪峰"),r("OutboundLink")],1),r("br"),e._v(" "),r("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/12/git-workflow.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git 工作流程 - 阮一峰"),r("OutboundLink")],1),r("br"),e._v(" "),r("a",{attrs:{href:"https://www.jianshu.com/p/b446c43577f9",target:"_blank",rel:"noopener noreferrer"}},[e._v("git flow 入门教程"),r("OutboundLink")],1),e._v(" "),r("a",{attrs:{href:"https://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"}},[e._v("A successful Git branching model"),r("OutboundLink")],1),r("br"),e._v(" "),r("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/using-branches/git-merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git Merge - Atlassian Tutorials"),r("OutboundLink")],1),r("br"),e._v(" "),r("a",{attrs:{href:"https://stackoverflow.com/questions/9069061/what-is-the-difference-between-git-merge-and-git-merge-no-ff",target:"_blank",rel:"noopener noreferrer"}},[e._v("What is the difference between "),r("code",[e._v("git merge")]),e._v(" and "),r("code",[e._v("git merge --no-ff")]),e._v("?"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("git 是一个版本管理工具，比较适合前端项目。"),r("br"),e._v("\nsvn 是另一种版本管理工具。")]),e._v(" "),r("p",[e._v("（版本管理不只可以用于项目代码，也可以用来管理 '.psd'、游戏存档…等）")]),e._v(" "),r("ul",[r("li",[e._v("相关工具\n"),r("ul",[r("li",[e._v("CLI\n"),r("ul",[r("li",[e._v("git\n"),r("ul",[r("li",[r("code",[e._v("brew install git")])])])]),e._v(" "),r("li",[e._v("tig\n"),r("ul",[r("li",[e._v("命令行版的 'source-tree'")]),e._v(" "),r("li",[e._v("git 自带的 "),r("code",[e._v("git log --oneline --decorate --all --graph")]),e._v(" 也能达到类似效果")]),e._v(" "),r("li",[r("code",[e._v("brew install tig")])])])])])]),e._v(" "),r("li",[e._v("GUI\n"),r("ul",[r("li",[e._v("source-tree\n"),r("ul",[r("li",[e._v("好用的图形化 git 管理器")]),e._v(" "),r("li",[r("code",[e._v("brew cask install sourcetree")])])])]),e._v(" "),r("li",[e._v("githubDeskop\n"),r("ul",[r("li",[e._v("git 官方出品 GUI 管理器，对 github 本身比较友好")]),e._v(" "),r("li",[r("code",[e._v("brew cask install github")])])])])])])])]),e._v(" "),r("li",[e._v("概念/规范/工具\n"),r("ul",[r("li",[e._v("git flow 工作流模型")]),e._v(" "),r("li",[r("code",[e._v("--no-ff")]),e._v(" (no fast forward merge) 参数，merge 的时候总是建立新分支，保持各分支含义清晰。")]),e._v(" "),r("li",[e._v("语义化版本（"),r("a",{attrs:{href:"https://semver.org/lang/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Semantic Versioning"),r("OutboundLink")],1),e._v("）\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"}},[e._v("conventional-changelog/standard-version"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("code",[e._v("npm i -g standard-version")])])])]),e._v(" "),r("li",[e._v("约定式提交（"),r("a",{attrs:{href:"https://www.conventionalcommits.org/zh/v1.0.0-beta.4/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Conventional Commits"),r("OutboundLink")],1),e._v("）\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("commitizen/cz-cli"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("code",[e._v("npm i -g commitizen")])])])]),e._v(" "),r("li",[e._v("changelog（"),r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[e._v("conventional-changelog"),r("OutboundLink")],1),e._v("）")]),e._v(" "),r("li",[e._v("submodules/lerna，管理多仓库项目的方式")]),e._v(" "),r("li",[e._v("badge（"),r("a",{attrs:{href:"https://shields.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("shields.io"),r("OutboundLink")],1),e._v("）")])])])]),e._v(" "),r("h2",{attrs:{id:"git-分支命名规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-分支命名规范","aria-hidden":"true"}},[e._v("#")]),e._v(" Git 分支命名规范")]),e._v(" "),r("ul",[r("li",[e._v("其实不管在什么项目开发的时候（当然不仅仅是用于项目代码，也可以管理.psd、游戏存档...等），都应该使用版本控制，不仅能减少许多不必要的麻烦（例如与另一个小伙伴），还能让你在进行某一项开发的时候临时接到一个新需求而不会感到手忙脚乱。其实在开始使用 Git 分支管理的时候，我在思考怎么命名分支才能够清楚每个分支的作用。上网找了许多资料，目前一下的分支命名规范是我觉得比较适合大多数项目开发模式的。")])]),e._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[e._v("分支:\t\t   命名:\t\t  说明:\n\n主分支\t\t   master\t\t  主要用来发布正式版本，就是提供给用户使用的版本\n开发分支\t\t   dev \t\t      永远是功能最全的分支\n功能分支\t\t   feature-*\t  新功能分支，某个功能点正在开发阶段\n发布版本\t\t   release-*\t  发布定期要上线的功能\n修复分支\t\t   bug-*\t\t  修复线上代码的 bug\n\n")])])])])},[],!1,null,null,null);t.default=o.exports}}]);